#summary Notes on Java Output

= Target Language : Java =

Java is the default output language of CookCC.  It can also be selected using the
{{{-lang java}}}  command line option.

Currently, only the lexer component has been finished.

== Command Line Options ==

|| {{{-d <directory>}}} || Select the output directory.  By default, it is the current directory. ||
|| {{{-lexertable <format>}}} || Select lexer DFA table format.  Available choices are {{{ecs}}}, {{{full}}}, and {{{compressed}}}.  This option will override the table choice specified in the input file. ||
|| {{{-class <className>}}} || Set the class name.  By default, the class name is {{{Lexer}}}.  The output Java file would be generated under the appropriate package subdirectories of the output directory.  The subdirectories would be created if they do not exist.  ||
|| {{{-public}}} || set class scope to {{{public}}}.  By default, the class generated is in the package scope. ||

== Lexer ==

[http://code.google.com/p/cookcc/source/browse/trunk/tests/#tests/fastwc Word count tests] on large files (5 MB - 22 MB) have shown that {{{ecs}}} table has about the same performance as the {{{full}}} table for Java.

=== Unicode Support ===

CookCC can generate 16-bit tables.  However, due to the size of of the equivalent class table, Sun's Java compilers cannot handle it.  A work around is to use [http://www.eclipse.org/jdt/core/index.php ECJ (Eclipse Core Java compiler)] to compile the generated code.

=== Performance ===

Here is a Lexer performance chart using Flex's fastwc examples (lower bar indicates better performance) on a simple 5 MB text file.  The following was tested using MinGW WC program, 5 version of word count under Flex (full table), CookCC (ecs table), and JFlex (ecs table).  MinGW WC was written and Flex generated C code, while CookCC and JFlex generated Java codes.

http://chart.apis.google.com/chart?chtt=Word%20Count%20Performance&cht=bvg&chs=670x300&chf=bg,s,ffffff|c,s,ffffcc&chdl=MinGW%20WC|Flex|CookCC|JFlex&chco=ff0000,00ff00,0000ff,ff00ff&chxt=x,y&chxr=0,1,5|1,0,1&chxp=0,1,2,3,4,5|1,0,0.2,0.4,0.6000000000000001,0.8,1&chg=100,100,1,0&chd=t:12.9,12.9,12.9,12.9,12.9|15.7,15.5,15,15,15.1|51.2,46.2,42.9,41.7,46.3|74,75.9,74.1,77.3,74.9&nonsense=something_that_ends_with.png

There were several reasons why JFlex was so much slower than CookCC.  JFlex does not have local variable declaration section and thus all variables need to be instance variables.  It also does not have a yyLength variable and must call yylength () function instead.  Startup time of JFlex is probably also an issue.

The file is too small to really show the differences among Flex's five different versions of word count for Flex, but the pattern shows quite noticeably for CookCC and the performance is expected (#1 to #4 has gradual improvements while #5 introduced backups and is actually slower).

As a side note, ecs table and full table didn't make much of the difference for CookCC.