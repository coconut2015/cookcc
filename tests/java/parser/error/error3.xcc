<?xml version = "1.0" encoding="UTF-8"?>
<!DOCTYPE cookcc PUBLIC "-//CookCC//1.0" "https://raw.githubusercontent.com/coconut2015/cookcc/master/src/resources/cookcc.dtd">
<cookcc>
	<!-- This example shows error reducable state finding and ';' finding. -->
	<!-- Also tests custom parse error function. -->
	<tokens>IDENTIFIER</tokens>
	<lexer>
		<rule>
			<pattern>"//"[^\n]*</pattern>
			<action>/* line comment */</action>
		</rule>
		<rule>
			<pattern>[a-zA-Z_][a-zA-Z_0-9]*</pattern>
			<action>_yyValue = yyText (); return IDENTIFIER;</action>
		</rule>
		<rule>
			<pattern>[ \t\r]</pattern>
			<action>/* ignore white spaces */</action>
		</rule>
		<rule>
			<pattern>[();]</pattern>
			<action>return yyText ().charAt (0);</action>
		</rule>
		<rule>
			<pattern>\n</pattern>
			<action>++m_lineNum;</action>
		</rule>
		<rule>
			<pattern>.</pattern>
			<action>/* ignore */</action>
		</rule>
		<rule>
			<pattern><![CDATA[<<EOF>>]]></pattern>
			<action>return 0; /* 0 is the EOF token */</action>
		</rule>
	</lexer>
	<parser start="program" parseerror="false">
		<grammar rule="program">
			<rhs>stmt_list</rhs>
		</grammar>
		<grammar rule="stmt_list">
			<rhs>stmt_list stmt</rhs>
			<rhs></rhs>
		</grammar>
		<grammar rule="stmt">
			<rhs>function ';'</rhs>
			<action>
				System.out.println ("making " + $1);
			</action>
			<rhs>error ';'</rhs>
			<action>
				System.out.println ("try to find ';' to restart");
				_yyInError = false;
			</action>
			<rhs>';'</rhs>
		</grammar>
		<grammar rule="function">
			<rhs>IDENTIFIER '(' ')'</rhs>
			<action>
				$$ = $1 + "()";
			</action>
			<rhs>IDENTIFIER '(' expr ')'</rhs>
			<action>
				$$ = $1 + "(" + $3 + ")";
			</action>
		</grammar>
		<grammar rule="expr">
			<rhs>IDENTIFIER</rhs>
			<action>$$ = $1;</action>
			<rhs>function</rhs>
			<action>$$ = $1;</action>
		</grammar>
	</parser>
	<code>
		private int m_lineNum = 1;

		private boolean yyParseError (int terminal)
		{
			System.out.println ("Custom error function");
			return false;
		}
	</code>
</cookcc>
