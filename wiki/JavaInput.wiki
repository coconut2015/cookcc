#summary Describes Java input.
<wiki:toc/>

= Java Input =

One of the innovations of CookCC is being able to directly specify the lexer/parser right in the Java code, without going into an obscure / proprietary input file.  This feature greatly simplifies the task of writing lexer/parser.

This capability can be extended to other languages, such as Python or C#.

== The Old Way of Writing Lexer/Parser ==

Traditionally, one would have to write lexer/parser in {{{*.l}}} or {{{*.y}}} input files.  There are several problems with using such proprietary file formats.

 * Difficult to write
   * Proprietary file format
     * The parsing of lex/yaccfiles are non-trivial and not easily portable for different languages
   * Lagging support in terms of modern IDE features.
     * Syntax highlighting
     * Context sensitive help
     * Instant error check, including semantic check as well as variable/function call checks.
     * Variable / function usage highlight and analysis.
     * Many many more.
   * Fragmented code
 * Difficult to maintain
   * Canâ€™t perform refactoring.
 * Difficult to document
   * Can't use generic documentation tools to extract comments etc.

XML input only solves part of the problem that being able to accept action codes for all languages, but it does not solve other problems.

== The New Way: Annotation Based Lex/Parse ==

 * Advantages
   * Write code as normal and take the full advantage of the modern IDEs.
 * Disadvantages
   * Need to write a language specific annotation parser
     * But developers don't need to worry about these issues.