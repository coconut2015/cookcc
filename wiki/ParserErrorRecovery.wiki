#summary Describes error recovery with the parser.

= Error Recovery =

{{{<parser>}}} has an option {{{recovery}}} which would turn on/off the error recovery code depending whether or not the value is {{{true}}} or {{{false}}}.  This value is by default {{{true}}}.

Turning off error recovery can be useful since a lot of time we do not really care much about the corrupted data, and error recovery can be slow.

The exact behavior of error recovery depends on the specific implementation of output language.

== Error Recovery in Java ==

When the {{{recovery}}} option is set to {{{false}}}, the parser simply returns with a value of {{{1}}} to indicate that an error has occurred.

Otherwise, the behavior of the parser is the following.

When a token not belonging to one of the lookahead (i.e. cannot either reduce or shift) is encountered, an error token is pushed onto the lookahead stack and an internal error flag {{{_yyInError}}} is set, and parsing is resumed.

If the error token can be shifted, then a grammar dealing with error recovery is found.  Otherwise, the parser would start discarding tokens on the stack until a grammar that can handle the "error" token is reached.

With the error token shifted on to the stack.  The state should be immediately reduceable if the grammar does not require any tokens after the error token.  Otherwise, it means the grammar is looking for a specific terminal.  Then the input is continuously consumed until the desired token is found, or the end of file is reached.

At any time, if {{{_yyInError}}} flag is true and again an error is encountered (presumably with the error token already injected), {{{yyParseError}}} function is called.  If this function returns {{{true}}} (by default), the parser stops and returns a value {{{1}}}.  Otherwise, {{{_yyInError}}} is reset to {{{false}}} and parser again proceeds as normal.

It is important for the grammar that contains {{{error}}} token to perform one of the following possible actions:
 * Artificially inject a token as lookahead by calling {{{yyPushLookahead}}} function to deal with a missing token (such as {{{';'}}} or {{{')'}}}).
 * Pop the lookahead (such as an extra {{{')'}}}) that originally caused the error.
 * return from the parser.

Failure to do so could result in an endless loop.  In case of successful error recovery, it is also necessary to clear the {{{_yyInError}}} flag.