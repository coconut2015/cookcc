CookCC is a lexer and parser (LALR (1)) generator project, combined. It
is written in Java, but the link:TargetLanguages.asc[target languages]
can vary.

CookCC comes with two unique features, which were the original
motivations for this work.

1.  CookCC uses a unique approach of storing and loading DFA tables in
Java that significantly reduces the starting up time. Many efforts have
been made to maximize the generated Java lexer and parser performances,
painstakingly line-by-line, case-by-case fine turning the lexer and
parser code. I believe that CookCC is the fastest lexer for Java (see
the link:TargetLanguageJava#Performance.asc[performance test]).
2.  CookCC allows lexer/parser patterns and rules to be specified using
Java annotation. This feature greatly simplifies and eases the writing
of lexer and parser for Java.

Other Features * CookCC can produce highly compressed DFA tables for
both the lexer and parser, using the similar compression algorithm found
in flex. * For the lexer, DFA states constructed were minimal. (In
contrast, Flex does not construct minimal DFA states).

CookCC requires JRE 1.5+ to run, but the generated Java code can be
compiled and run with earlier versions of Java. There are *zero
dependencies* for the generated Java code. So it is light and fast.

The current release is 0.3.3.

I am currently working on examples for 0.4. Hopefully, I will find time
between gaming and working to get it done soon.

Note: the BSD license only applies to CookCC itself. The code generated
belongs to you.

[[road-map-for-0.5]]
Road Map for 0.5
----------------

* add http://re2c.org/[re2c]-like direct code generation option for
Lexer rather than only using table lookup (as of now).
** Possible mixed mode of execution to reduce table size (and code
size), by reducing the number of states to be stored and possibly fewer
equivalent classes.
** Performance gain for Java is questionable but I have thought out the
way doing it.
* C and C++ code generation.
** More of the long term because right now I do not have need to do so.
The performance of http://flex.sourceforge.net/[flex] for C is
*extremely* difficult to beat anyways.

[[whats-new]]
What's New
----------

[[upcoming-release]]
0.4 (Upcoming Release)
~~~~~~~~~~~~~~~~~~~~~~

* changed from hand written lexer parser to cookcc generated.
Internally, an intermediate parse tree was generated for each RegEx so
that some folding could occur. `(a|b)` can be converted to `[ab]`
internally.
* added [:word:] character class (which is not POSIX).
* added -extend option to set the parent class of the generated class
* updated debugLexer, debugLexerBackup, debugParser signature so that it
is actually meaningful overload these debugging functions.
* https://code.google.com/p/cookcc/issues/detail?id=27[Issue 27]: Add an
option of using '' as EOB to further improve lexer performance.
* https://code.google.com/p/cookcc/issues/detail?id=26[Issue 26]: Add
line mode scanning.
* https://code.google.com/p/cookcc/issues/detail?id=25[Issue 25]: When
exception occurred during code generation, the file gets overwritten
with garbage.
* https://code.google.com/p/cookcc/issues/detail?id=24[Issue 24]: Add
@SuppressWarnings ("unchecked") automatically for yyParse() to avoid
compiler warnings.
* https://code.google.com/p/cookcc/issues/detail?id=23[Issue 23]: added
reset() function in the generated class.
* https://code.google.com/p/cookcc/issues/detail?id=20[Issue 20]:
allowed the start symbol to be specified in Java annotation input (by
default it was the LHS of the first @Rule).
* https://code.google.com/p/cookcc/issues/detail?id=19[Issue 19]:
allowed grammar on Java interfaces.
* https://code.google.com/p/cookcc/issues/detail?id=18[Issue 18]: added
-generics option to generate Java code that use generics.
* https://code.google.com/p/cookcc/issues/detail?id=17[Issue 17]: added
optional / optional list / list grammar shortcuts.
* Possible tree generator (grammar on Java annotations only)

[[section]]
0.3.3
~~~~~

* allowed the internal buffer to be automatically increased for long
matches.
* https://code.google.com/p/cookcc/issues/detail?id=14[Issue 14]: added
yyPushInput, yyPopInput, yyInputStackSize, yyWrap functions (and yywrap
option).
* https://code.google.com/p/cookcc/issues/detail?id=13[Issue 13]: turn
on backup lex state warning only when requested.
* https://code.google.com/p/cookcc/issues/detail?id=12[Issue 12]: added
setBOL function to set the next token to be at BOL.
* https://code.google.com/p/cookcc/issues/detail?id=11[Issue 11]: yacc
output does not have %start.
* https://code.google.com/p/cookcc/issues/detail?id=10[Issue 10]: yacc
output fails on empty TokensDoc.

[[section-1]]
0.3.2
~~~~~

* added yacc grammar input and output.
* added yyPushLexerState and yyPopLexerState functions.
* added line number information for the error messages for Java input.
* added "parserprolog" section for the generated Java code.
* https://code.google.com/p/cookcc/issues/detail?id=9[Issue 9]: unable
to handle `'\''` terminals in the grammar.
* https://code.google.com/p/cookcc/issues/detail?id=8[Issue 8]:
incorrect lalr item lookahead calculation. Now tested against bison
using several major language grammars.
* https://code.google.com/p/cookcc/issues/detail?id=7[Issue 7]: disable
APT compile for the CookCC Ant task to prevent class files from
generated.
* https://code.google.com/p/cookcc/issues/detail?id=6[Issue 6]:
erroneous warning of unreachable pattern when a lex pattern is shared
among multiple lex states.
* https://code.google.com/p/cookcc/issues/detail?id=5[Issue 5]: `<rule>`
tag `state` attribute did not work.

[[section-2]]
0.3.1
~~~~~

* added single quoted literal string as lex patterns.

[[section-3]]
0.3
~~~

* added input using Java annotation.
* https://code.google.com/p/cookcc/issues/detail?id=2[Issue 2]: multiple
incomplete state can cause internal lex error due to reassignment of the
internal pattern case values.
* https://code.google.com/p/cookcc/issues/detail?id=1[Issue 1]:
incorrectly generated parser if start non-terminal is not specified

[[section-4]]
0.2
~~~

* added parser generator.

[[section-5]]
0.1
~~~

* initial release. Only includes lexer generator.
