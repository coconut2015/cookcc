#summary Describes the Lexer XML format

= XML Format =

Currently, CookCC Lexer only accepts XML ([http://code.google.com/p/cookcc/source/browse/trunk/src/resources/cookcc.dtd DTD] input files.  The default extension is {{{*.xcc}}} .

= Example =
A sample XML looks like:

{{{
<?xml version = "1.0" encoding="UTF-8"?>
<!DOCTYPE cookcc PUBLIC "-//CookCC//1.0" "http://code.google.com/p/cookcc/source/browse/trunk/src/resources/cookcc.dtd">
<cookcc>
	<code name="fileheader">
/*
 * Copyright 2008 by ...
 *
 */	</code>
	<code name="classheader">
/**
 * Class header.
 *
 * @version $Id$
 */	</code>
	<code name="lexerprolog">
	// local variables within yyLex () function
	int cc = 0, wc = 0, lc = 0;
	</code>
	<lexer>
		<shortcut name="ws">[ \t]</shortcut>
		<shortcut name="nonws">[^ \t\n]</shortcut>
		<rule>
			
		</rule>
		<state name="INITIAL,TEST">
			<rule state="ANOTHER_STATE">
				<pattern><![CDATA[<<EOF>>]]></pattern>
				<action>
					return 0;  /* exit lexer loop */
				</action>
			</rule>
		</state>
	</lexer>
	<code>
	// some other pieces of code appended at the end of the class.
	public void doNothing ()
	{
	}
	</code>
</cookcc>
}}}

== Explainations ==
=== {{{<code>}}} Tag ===
The {{{<code>}}} tag can specify any pieces of code and can locate any where directly under {{{<cookcc>}}} tag, before or after {{{<lexer>}}} tag.  The name of the code needs to be unique.  The exact usage of that code depends on the template being used.  For Java, you can take a look at [http://code.google.com/p/cookcc/source/browse/trunk/src/resources/templates/java/class.txt Java output template] to get an rough idea.