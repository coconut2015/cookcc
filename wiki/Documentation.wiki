#summary Project Documentation
#labels Featured

= CookCC Documentation =

CookCC is intended to be a lexer and parser generator project, combined.  It is written in Java, but the [TargetLanguages target languages] can vary.  It uses a template approach to generate source codes, so it is quite easy to add a new target language.  CookCC also comes with a suite of [http://code.google.com/p/cookcc/source/browse/trunk/tests/ test cases] to assist creating and testing new target languages.

The input to CookCC is currently limited to an XML ([http://code.google.com/p/cookcc/source/browse/trunk/src/resources/cookcc.dtd DTD]) format.

CookCC requires JRE 1.5+ to run, although the generated Java code can be compiled by earlier versions of JDK.

The current release is 0.2.  It contains both the lexer and parser (LALR (1)) generator.

== Command Line Options ==

|| {{{-help}}} || Display available command line options. ||
|| {{{-lang <language>}}} || Select the output language.  Default is java.  ||
|| {{{-quiet}}} || Suppress console messages. ||
|| {{{-debug}}} || Generate debugging code.  The effect depends on the target language code generator. ||
|| {{{-analysis}}} || Generate an [http://code.google.com/p/cookcc/source/browse/trunk/tests/java/parser/calc/cookcc_parser_analysis.txt analysis file] for the parser grammar.  The file name is fixed to {{{cookcc_parser_analysis.txt}}}. ||
|| {{{-defaultreduce}}} || Generate a compact parser table by assuming that entries would be reduced by default, even in cases of unwanted look ahead.  Only java code generator currently checks this option. ||

Language specific options can be found by specifying the language along with {{{-help}}}.  For example:

{{{cookcc -help -lang java}}}