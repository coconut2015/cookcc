#summary Specifies how to define parser using Java annotation
<wiki:toc/>

== Specifying Parser Rules ==

{{{@Rule}}} specifies a single grammar rule.  {{{@Rules}}} can be used to specify multiple rules that share the same function action.

There are also three cases of functions marked using {{{@Rule}}}

=== Case 1: Function returns an int value ===

This function is used by the grammar start non-terminal to signal the exit of the parser with the particular value.  It can be used by error processing functions as well.

{{{
	@Rule (lhs = "program", rhs = "function")
	protected int parseProgram ()
	{
		return 0;
	}
}}}

=== Case 2: Function returns void ===

In this case, the value associated with the non-terminal of the LHS is null.

{{{
	@Rule (lhs = "function", rhs = "function stmt", args = "2")
	protected void parseFunction (Node node)
	{
		interpret (node);
	}
}}}

Note the {{{args}}} contains the indexes of values that would to be passed to the function.  The indexing value starts from 1 for the production on the RHS.

As you can see, one does not have to mess with {{{$$}}}, {{{$1}}} etc, and does not have to deal with type information specified elsewhere.  This approach is much more intuitive.

=== Case 3: Function returns an Object ===

In this case, the return value is automatically associated with the non-terminal on the LHS.

{{{
	@Rule (lhs = "stmt", rhs = "SEMICOLON")
	protected Node parseStmt ()
	{
		return new SemiColonNode ();
	}
}}}