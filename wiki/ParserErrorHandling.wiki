#summary Describes error handling with the parser.

= Error Handling =

The error handling of error token depends on the specific implementation of output language.

== Error Handling in Java ==

When a token not belongs to one of the lookahead (i.e. cannot either reduce or shift), an error token is pushes onto the lookahead stack and an internal error flag {{{_yyInError}}} is set, and the parsing proceeds as usual.

At this point, if there is a grammar with error token in it, the direction of parsing would go that way and the token that causes the error pending on the lookahead stack.

If {{{_yyInError}}} flag is true and again an error is encountered (presumably with the error token already injected), {{{yyParseError}}} function is called.  If this function returns {{{true}}}, the parser stops and returns a value {{{1}}}.  Otherwise, {{{_yyInError}}} is reset to {{{false}}} and parser again proceeds as normal.

It is important for the grammar that contains {{{error}}} token to perform one of the following possible actions:
 * Artificially inject a token using by calling {{{yyPushLookahead}}} function to deal with a missing token (such as {{{';'}}} or {{{')'}}}).
 * Pop the lookahead (such as an extra {{{')'}}}) that originally caused the error.
 * return from the parser.
Failure to do so could result in an endless loop.