#summary Describes Java input.
<wiki:toc/>

= Java Input =

One of the cool feature of CookCC is being able to directly specify the lexer/parser right in the Java code, without going into an obscure / proprietary input file.  This feature greatly simplifies the task of writing lexer/parser.

This capability can be extended to other languages, such as Python or C#.

== The Old Way of Writing Lexer/Parser ==

Traditionally, one would have to write lexer/parser in {{{*.l}}} or {{{*.y}}} input files.  There are several problems with using such proprietary file formats.

 * Difficult to write
   * Proprietary file format
     * The parsing of lex/yaccfiles are non-trivial and not easily portable for different languages
   * Lagging support in terms of modern IDE features such as
     * Syntax highlighting
     * Context sensitive help
     * Instant error check, including semantic check as well as variable/function call checks.
     * Variable / function usage highlight and analysis.
     * Automatic code/template insertions that reduce typing.
     * Many many more.
   * Fragmented code
 * Difficult to maintain
   * Canâ€™t perform refactoring.
 * Difficult to document
   * Can't use generic documentation tools to extract comments etc.

XML input only solves part of the problem that being able to accept action codes for all languages, but it does not solve other problems.

== The New Way: Annotation Based Lex/Parse ==

 * Advantages
   * Write code as normal and take the full advantage of the modern IDEs.
   * No longer have to deal with $$, $1 etc.
   * Coherent code without fragmentation
   * Comments can be easily extracted using generic documentation tools.
   * Most languages have documentation tools that can be utilized to deal with annotations.
 * Disadvantages
   * Need to write a language specific annotation parser.  But developers do not need to worry about these issues.

== CookCC Input Using Java Annotation ==

Although it is possible to use [http://java.sun.com/j2se/javadoc/ JavaDoc] doclet to extract annotations, the [http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html annotation] capabilities of Java 1.5 is simply a lot easier to use and deal with.  For this reason, I settled to use Java 1.5.  This however, does not mean the code generated has to be run under JVM 1.5+.  One can always target the output class files for earlier version of JVM.

Please goto [JavaInputOverview overview] section to start.

There are a number of examples in [http://code.google.com/p/cookcc/source/browse/trunk/tests/javaap test cases].

== Related Work ==

* [http://pages.cpsc.ucalgary.ca/~aycock/spark/ SPARK] which is for Python uses doc string to specify the lexer/parser components.  Aycock, J. "Compiling Little Languages in Python", Proceedings of the Seventh International Python Conference, p100, 1998.