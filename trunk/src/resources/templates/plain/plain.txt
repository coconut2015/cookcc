<#macro array a>
<#list a as i><#if i_index &gt; 0>,</#if>${i}</#list>
</#macro>
<#macro intarray a>
<#list a as i><#if i_index &gt; 0>,</#if>${i?string(0)}</#list>
</#macro>
<#macro intarray3d b>
<#list b as a>
	<@intarray a/>
</#list>
</#macro>
<#if lexer?has_content>
# lexer
# properties
: unicode = ${unicode?string}
: bol = ${lexer.bol?string}
: backup = ${lexer.backup?string}
: cases = ${lexer.caseCount?string(0)}
: table = ${lexer.table}
<#if lexer.table == "ecs" || lexer.table == "compressed">
: ecs = ${lexer.ecsGroupCount?string(0)}
</#if>
: states = ${lexer.dfa.size?string(0)}
# memory usage
: full table = ${((lexer.eof + 1) * lexer.dfa.size)?string(0)}
<#if lexer.table == "ecs" || lexer.table == "compressed">
: ecs table = ${(lexer.eof + 1 + lexer.ecsGroupCount * lexer.dfa.size)?string(0)}
</#if>
<#if lexer.table == "compressed">
: next = ${lexer.dfa.next?size?string(0)}
: check = ${lexer.dfa.check?size?string(0)}
<#if !lexer.dfa.default?has_content>
: compressed table = ${(lexer.eof + 1 + lexer.dfa.next?size + lexer.dfa.next?size)?string(0)}
<#else>
: default = ${lexer.dfa.default?size?string(0)}
<#if !lexer.dfa.meta?has_content>
: compressed table = ${(lexer.eof + 1 + lexer.dfa.next?size + lexer.dfa.next?size + lexer.dfa.default?size)?string(0)}
<#else>
: meta = ${lexer.dfa.meta?size?string(0)}
: compressed table = ${lexer.eof + 1 + lexer.dfa.next?size + lexer.dfa.next?size + lexer.dfa.default?size + lexer.dfa.meta?size}
</#if>
</#if>
</#if>
<#if lexer.table == "ecs" || lexer.table == "compressed">
# ecs
<@intarray lexer.dfa.ecs/>
</#if>
# dfa
<#if lexer.table == "ecs" || lexer.table == "full">
<@intarray3d lexer.dfa.table/>
</#if>
<#if lexer.table == "compressed">
# compressed correctly = ${lexer.dfa.correct?string}
# base
<@intarray lexer.dfa.base/>
# next
<@intarray lexer.dfa.next/>
# check
<@intarray lexer.dfa.check/>
<#if lexer.dfa.default?has_content>
# default
<@intarray lexer.dfa.default/>
</#if>
<#if lexer.dfa.error>
: error = ${lexer.dfa.error?string}
</#if>
<#if lexer.dfa.meta?has_content>
# meta
<@intarray lexer.dfa.meta/>
</#if>
</#if>
# states
<@array lexer.states/>
# begins
<@intarray lexer.begins/>
# accepts
<@intarray lexer.accept/>
# cases
<#list lexer.cases as i>
<#list i.patterns as p>
case ${p.caseValue?string(0)}
{${i.action}}
</#list>
</#list>
# end
</#if>
