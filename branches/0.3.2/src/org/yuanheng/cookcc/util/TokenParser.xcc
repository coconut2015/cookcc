<?xml version = "1.0" encoding="UTF-8"?>
<!DOCTYPE cookcc PUBLIC "-//CookCC//1.0" "http://code.google.com/p/cookcc/source/browse/trunk/src/resources/cookcc.dtd">
<cookcc>
	<!-- Under src/ directory, use the following parameters to generate the code
		 cookcc -public -class org.yuanheng.cookcc.util.TokenParser org\yuanheng\cookcc\util\TokenParser.xcc
	-->
	<code name="fileheader">/*
 * Copyright (c) 2008, Heng Yuan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Heng Yuan nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Heng Yuan ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Heng Yuan BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</code>
	<lexer>
		<rule>
			<pattern>[a-zA-Z_][a-zA-Z_0-9]*</pattern>
			<pattern>[0-9]+</pattern>
			<pattern>\'[^\\']\'</pattern>
			<pattern>\\[0-9]{1,3}</pattern>
			<pattern>\\x[[:xdigit:]]{1,2}</pattern>
			<action>m_tokenList.add (yyText ());</action>
		</rule>
		<rule>
			<pattern>[, \r\t\n]+</pattern>
			<action></action>
		</rule>
		<rule>
			<pattern>.</pattern>
			<action>throw new IOException ("Invalid character: " + yyText ());</action>
		</rule>
		<rule>
			<pattern><![CDATA[<<EOF>>]]></pattern>
			<action>return 0;</action>
		</rule>
	</lexer>
	<code name="classheader"><![CDATA[
import java.io.ByteArrayInputStream;
import java.util.LinkedList;

/**
 * This class is used to parse tokens inside &lt;tokens> tag or similar tags that
 * list a series of symbols.  Things get complicated with single quoted characters
 * and such.
 *
 * @author Heng Yuan
 * @version $Id$
 */]]></code>
	<code><![CDATA[
		private final LinkedList<String> m_tokenList = new LinkedList<String> ();

		private TokenParser ()
		{
		}

		public static String[] parseString (String input) throws IOException
		{
			TokenParser tokenParser = new TokenParser ();
			tokenParser.setInput (new ByteArrayInputStream (input.getBytes ("US-ASCII")));
			tokenParser.yyLex ();
			return tokenParser.m_tokenList.toArray (new String[tokenParser.m_tokenList.size ()]);
		}
	]]></code>
</cookcc>
